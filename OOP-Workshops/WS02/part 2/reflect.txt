/******************************************************************
Reflection
Name: Sewak Singh Gill
Email: sgill116@myseneca.ca
Student Id: 159282219
Date: September 25, 2022
******************************************************************/

This workshop provided me a lot of insight into different aspects of the C++ programming. One of those concepts was the rule of 5, which is basically the rule of 3 with move constructor and move assignment operator included. I used experienced working with std::strings for the first in the C++ and these are way better and cleaner than C-style strings which require memory management by the programmer. 
Using std::chrono library too was not an easy task as I didnot know anything about its library, functions and valid arguments that I needed in my case. Then after searching stack overflow website, I found out what to use and I worked fine. But in case of default constructor and move operations, the durations were 0 naoseconds. For testing purposes, I added a delay fucntion of 0seconds in the move assignment and it showed perfectly fine results. But I have commented it out.
The reason for significant time difference between copy and move operations is that in copy operation, all the values need to be copied into a second object, one by one. But in move operation, instead of creating duplicate values, the ownership of object-data is transferred to a new owner.
The approach taken to read the input file is using creating a ifstream object which reads the filestream from the specified file. Then, the getline function is used in a while loop to count the number of lines in the file. Then, we reset the file reading position to the begining and read the file into array of TennisMatch objects allocated dynamically on the basis of the number of lines in the file.
    ifstream infile(fname);
    int count = 0;
    string temp;
    while (!infile.eof())
    {
        getline(infile, temp);
        count++;
    }
    infile.clear();
    infile.seekg(0);

    match_arr = new TennisMatch[count];
    getline(infile, temp);
    for (int i = 0; i < count - 1; i++)
    { ...//reading into alloacted memory...}

To my knowledge there is know way to perform the above operation without rereading the file.

steady_clock uses a constant tick and is free of changes from the operating system and system time and thus cannot be changed, whereas system_clock can be changed and this is turn can produce unexpected results. steady_clock is favourable to use in this case scenario because it will always produce results that are free from outer interference of the system. 
